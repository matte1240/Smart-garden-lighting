blueprint:
  name: üåÖ Luci Giardino Intelligenti (ottimizzato)
  description: >
    Blueprint migliorato per la gestione automatica delle luci del giardino.
    Optional motion sensor, controllo per giorni lavorativi, boost meteo e
    transizioni morbide.
  domain: automation
  author: Matte1240
  homeassistant:
    min_version: 2023.4.0

  input:
    garden_lights:
      name: üîÜ Luci del Giardino
      description: Seleziona le luci del giardino da controllare automaticamente
      selector:
        target:
          entity:
            domain: light

    motion_sensor:
      name: üö∂ Sensore di Movimento (opzionale)
      description: Sensore PIR o di movimento. Lascia vuoto se non disponibile.
      default: null
      selector:
        entity:
          domain: binary_sensor
          device_class: motion

    sun_elevation:
      name: üåÖ Elevazione Sole per Accensione
      description: Gradi sotto l'orizzonte per accensione automatica (-6 = tramonto civile)
      default: -6
      selector:
        number:
          min: -15
          max: 0
          step: 0.5
          unit_of_measurement: "¬∞"

    base_brightness:
      name: üí° Luminosit√† Base (Serale %)
      default: 30
      selector:
        number:
          min: 10
          max: 100
          step: 5
          unit_of_measurement: "%"

    motion_brightness:
      name: üîÜ Luminosit√† con Movimento (%)
      default: 80
      selector:
        number:
          min: 50
          max: 100
          step: 5
          unit_of_measurement: "%"

    motion_duration:
      name: ‚è±Ô∏è Durata Luminosit√† Alta
      default:
        minutes: 5
      selector:
        duration:
          enable_day: false

    night_off_time:
      name: üåô Orario Spegnimento Notturno
      default: "23:30:00"
      selector:
        time: {}

    weekday_only:
      name: üìÖ Solo Giorni Feriali
      default: false
      selector:
        boolean: {}

    enable_weather_boost:
      name: üåßÔ∏è Aumento per Maltempo
      description: Aumenta luminosit√† base quando c'√® maltempo (+20%)
      default: false
      selector:
        boolean: {}

variables:
  motion_entity: !input motion_sensor
  has_motion_sensor: "{{ motion_entity not in [none, '', 'unknown'] }}"
  weekday_only: !input weekday_only
  is_weekday: "{{ now().weekday() < 5 }}"
  should_run: "{{ not weekday_only or is_weekday }}"
  base_brightness_in: !input base_brightness
  weather_boost_enabled: !input enable_weather_boost
  weather_state: "{{ states('weather.home') | default('unknown', true) }}"
  final_base_brightness: >
    {% set b = base_brightness_in | int(0) %}
    {% if weather_boost_enabled and weather_state in ['rainy','snowy','fog','cloudy','rain'] %}
      {{ [b + 20, 100] | min }}
    {% else %}
      {{ b }}
    {% endif %}

trigger:
  - platform: numeric_state
    entity_id: sun.sun
    attribute: elevation
    below: !input sun_elevation
    id: sunset_trigger

  # Trigger di movimento basato su template per gestire il sensore opzionale
  - platform: template
    value_template: "{{ has_motion_sensor and is_state(motion_entity, 'on') }}"
    id: motion_on_trigger

  - platform: template
    value_template: "{{ has_motion_sensor and is_state(motion_entity, 'off') }}"
    for: !input motion_duration
    id: motion_off_trigger

  - platform: time
    at: !input night_off_time
    id: night_off_trigger

  - platform: time
    at: "06:00:00"
    id: morning_check_trigger

condition:
  - condition: template
    value_template: "{{ should_run }}"

action:
  - choose:
      # TRAMONTO / CONTROLLO MATTUTINO
      - conditions:
          - condition: trigger
            id:
              - sunset_trigger
              - morning_check_trigger
          - condition: numeric_state
            entity_id: sun.sun
            attribute: elevation
            below: !input sun_elevation
        sequence:
          - service: light.turn_on
            target: !input garden_lights
            data:
              brightness_pct: "{{ final_base_brightness }}"
              transition: 30
          - service: logbook.log
            data:
              name: "üåÖ Luci Giardino"
              message: "Accese ({{ trigger.id }}) ‚Äî Luminosit√†: {{ final_base_brightness }}%"

      # MOVIMENTO RILEVATO
      - conditions:
          - condition: trigger
            id: motion_on_trigger
          - condition: numeric_state # Controllo ridondante ma sicuro
            entity_id: sun.sun
            attribute: elevation
            below: !input sun_elevation
        sequence:
          - service: light.turn_on
            target: !input garden_lights
            data:
              brightness_pct: !input motion_brightness
              transition: 2
          - service: logbook.log
            data:
              name: "üö∂ Movimento"
              message: "Luminosit√† aumentata a {{ !input motion_brightness }}%"

      # FINE MOVIMENTO
      - conditions:
          - condition: trigger
            id: motion_off_trigger
          - condition: numeric_state
            entity_id: sun.sun
            attribute: elevation
            below: !input sun_elevation
        sequence:
          - service: light.turn_on
            target: !input garden_lights
            data:
              brightness_pct: "{{ final_base_brightness }}"
              transition: 10
          - service: logbook.log
            data:
              name: "‚è±Ô∏è Movimento Terminato"
              message: "Ripristinata luminosit√† a {{ final_base_brightness }}%"

      # SPEGNIMENTO NOTTURNO
      - conditions:
          - condition: trigger
            id: night_off_trigger
        sequence:
          - service: light.turn_off
            target: !input garden_lights
            data:
              transition: 30
          - service: logbook.log
            data:
              name: "üåô Spegnimento Notturno"
              message: "Luci spente come da programma ({{ !input night_off_time }})"
    default: []

mode: restart
max_exceeded: silent